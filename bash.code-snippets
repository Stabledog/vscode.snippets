{
    // Helper: use vscode-make-snippet.sh to format code for
    //   the snippet json rules.
    //
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"newScript": {
        "description": "Common basic elements of a new script: die(), main(), etc.",
		"prefix": ["bashScript"],
		"body": [
			"#!/bin/bash",
            "# ${TM_FILENAME}",
            "",
            "scriptName=\"$(readlink -f \"\\$0\")\"",
            "scriptDir=$(command dirname -- \"\\${scriptName}\")",
            "",
            "die() {",
            "    builtin echo \"ERROR(\\$(basename \\${scriptName}): \\$*\" >&2",
			"    builtin exit 1",
			"}",
            "",
            "stub() {",
            "   builtin echo \"  <<< STUB[\\$*] >>> \" >&2",
            "}",
            "main() {",
            "    builtin echo \"args:[\\$*]\" ",
            "}",
            "",
            "[[ -z \\${sourceMe} ]] && {",
            "    main \"\\$@\" ",
            "    builtin exit",
            "}",
            "command true",
            ""
		]
	},

    "makeCanonpath": {
        "description": "Create canonpath() definition",
        "prefix": ["canonpath"],
        "scope": "shellscript",
        "body": [
            "canonpath() {",
            "    builtin type -t realpath.sh &>/dev/null && {",
            "        realpath.sh -f \"\\$@\"",
            "        return",
            "    }",
            "    builtin type -t readlink &>/dev/null && {",
            "        command readlink -f \"\\$@\"",
            "        return",
            "    }",
            "    # Fallback: Ok for rough work only, does not handle some corner cases:",
            "    ( builtin cd -L -- \"\\$(command dirname -- \\$0)\"; builtin echo \"\\$(command pwd -P)/\\$(command basename -- \\$0)\" )",
            "}",
        ]
    },
    "sourceMeRun": {
        "description": "Include sourceMeRun.taskrc",
        "prefix": ["bpoint", "sourceMeRun"],
        "scope": "shellscript",
        "body": [
            "# Defines bpoint():",
            "_DEBUG_=\\${_DEBUG_:-0}",
            "[[ \\$_DEBUG_ -eq 1 ]] && {",
            "    echo \"_DEBUG_ enabled, sourceMeRun.taskrc is loading.\" >&2",
            "    [[ -f ~/bin/sourceMeRun.taskrc ]] && source ~/bin/sourceMeRun.taskrc",
            "} || {",
            "    bpoint() { : ;} # no-op",
            "}",
            ""
        ]
    },
    "stub-func": {
        "description": "Define the stub() function",
        "prefix": ["stub-func"],
        "scope": "shellscript",
        "body": [
            "stub() {",
            "    # Print debug output to stderr.  Call like this:",
            "    #   stub \\${FUNCNAME[0]}.\\$LINENO item item item",
            "    #",
            "    builtin echo -n \"  <<< STUB\" >&2",
            "    for arg in \"\\$@\"; do",
            "        echo -n \"[\\${arg}] \" >&2",
            "    done",
            "    echo \" >>> \" >&2",
            "}",
        ]
    },
    "stub-call": {
        "description": "Call the stub() function with context and message",
        "prefix": ["stub-call"],
        "scope": "shellscript",
        "body": [
            "stub \"\\${FUNCNAME[0]}.\\${LINENO}\" \"\\$@\" \"<Put your message here>\"",
        ]
    },
	"die": {
		"prefix": "die",
        "scope": "shellscript",
		"body": [
			"die() {",
			"    echo \"ERROR: $*\" >&2",
			"    exit 1",
			"}"
		],
		"description": "Terminate shell with error 1 and message"
	},
    "python3_detector": {
        "prefix": "python3",
        "scope": "shellscript",
        "body": [
            "python3() {",
            "\t[[ -n ${BEST_PY3} ]] && { \"\\$BEST_PY3\" \"\\$@\" ; return; }",
            "\tlocal cand;",
            "\tfor cand in python3.{10,9,8,7} python3; do",
            "\t\tlocal py_cand=\"\\$( which ${cand} )\"",
            "\t\t\"\\$py_cand\" -c 'import termios' &>/dev/null || \\",
            "\t\t\tcontinue  # We don't want a dos/windows version",
            "\t\tBEST_PY3=\"${py_cand}\"",
            "\t\tbreak",
            "\tdone",
            "\t[[ -z \"\\$BEST_PY3\" ]] && { echo \"ERROR: no python3 on path\" >&2; return;  }",
            "\t\"\\$BEST_PY3\" \"\\$@\"",
            "}",
            ""
        ],
        "description": "Detect installed version of python3 and then invoke it"
    },
	"parseArgs": {
		"prefix": "parseArgs",
        "scope": "shellscript",
		"body": [
			"parseArgs() {",
			"    [[ $# -eq 0 ]] && die \"Expected arguments\"",
			"    local filename  # Declare arguments to be parsed as local",
			"    while [[ -n \\$1 ]]; do",
			"        case \\$1 in",
			"            -h|--help)",
			"                #  do_help $*",
			"                exit 1",
			"                ;;",
			"            -f|--filename)",
			"                filename=\\$2",
			"                shift",
			"                ;;",
			"            *)",
			"                unknown_args=\"\\$unknown_args \\$1\"",
			"                ;;",
			"        esac",
			"        shift",
			"    done",
			"    # Validate that minimal args have been parsed:",
			"    # ??",
			"}"
		],
		"description": "Iterate args and interpret them"
	}
}

