{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    "auto help target": {
        "description": "Generate a help target that lists all other targets",
        "prefix": ["auto help"],
        "scope": "makefile",
        "body": [
            ".PHONY: help",
            "help:",
            "\t@\\$(MAKE) -s --print-data-base --question no-such-target 2>/dev/null | \\",
            "\tgrep -v  -e '^Makefile' -e '^help' | \\",
            "\tawk '/^[^.%][-A-Za-z0-9_]*:/ \\",
            "\t\t\t{ print substr(\\$\\$1, 1, length(\\$\\$1)-1) }' | \\",
            "\tsort | \\",
            "\tpr --omit-pagination --width=100 --columns=3",
        ]
    },
    "realpath extraction": {
        "scope": "makefile",
        "description": "Get the canonical dir for current Makefile",
        "prefix": ["absdir","realpath","readlink","abspath"],
        "body": [
            "# See https://stackoverflow.com/a/73509979/237059",
            "absdir := \\$(dir \\$(realpath \\$(lastword \\$(MAKEFILE_LIST))))",
        ]
    },
    "phony targets declaration": {
        "scope": "makefile",
        "description": "Declare .PHONY target names",
        "prefix": [".PHONY","phony"],
        "body":[
            ".PHONY: phony1 phony2"
        ]
    },
    "list-targets": {
        "description": "Add a list-targets target within a makefile.  See also the brilliant description in https://stackoverflow.com/a/26339924/237059",
        "prefix": ["list-targets"],
        "scope": "makefile",
        "body": [
            ".PHONY: list-targets",
            "list-targets:",
            "\t@LC_ALL=C \\$(MAKE) -pRrq -f $TM_FILENAME : 2>/dev/null | awk -v RS= -F: '/(^|\\n)# Files(\\n|\\$\\$)/,/(^|\\n)# Finished Make data base/ {if (\\$\\$1 !~ \"^[#.]\") {print \\$\\$1}}' | sort | egrep -v -e '^[^[:alnum:]]' -e '^\\$@\\$\\$' | tr '\\n' ' '",
        ]
    },
    "define REMAKE": {
        "description": "Adds a Remake def to recursively invoke make with current makefile",
        "prefix": ["remake"],
        "scope": "makefile",
        "body": [
            "Remake := \\$(MAKE) -s -f \\$(lastword \\$(MAKEFILE_LIST))"
        ]
    },

    "phony target new": {
        "description": "Creates a new .PHONY make target",
        "prefix": ["phony",".PHONY"], // Multiple prefixes may be defined
        "scope": "makefile",
        "body": [
            ".PHONY: $1",
            "${1:target}:",
            "\t@# TODO: explain ${1:target}",
            "\t$0"
        ]
    },
    "ps4x": {
        "description": "Shell diagnostic prefx Ps4x",
        "prefix": ["ps4x"],
        "scope": "makefile",
        "body": [
            "Ps4=@PS4='+\\$\\$?| \\$@:\\$\\${LINENO}> '",
            "Ps4x=\\$(Ps4); set -x;",
        ]
    },
    "xtarget create": {
        "description": "Create simple target with debug support",
        "prefix": ["target create"], // Multiple prefixes may be defined
        "scope": "makefile",
        "body": [
            "${1:<enter target name>}:",
            "\t@# ${2:<Description>}",
            "\t\\$(Ps4x)  # Display debug output on stderr",
            "\tset -ue  # Enable exit-on-fail and no-uninit-variables",
            "\t$0for vv in {a..c}; do",
            "\t\techo \"\\$\\$vv\"",
            "\tdone",
            "",
        ]
    },
}

